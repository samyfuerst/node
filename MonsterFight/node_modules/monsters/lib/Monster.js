var help=require('./Help')

function Monster(attackOrder) {
    "use strict";
    this._attackOrder = attackOrder;
    this._attacks=help.calculateAttacks(20,12,attackOrder);
}

Monster.prototype._sound=null;
Monster.prototype._attackOrder=null;
Monster.prototype._attacks=null;
Monster.prototype._health=5;
Monster.prototype.name=null;


Monster.prototype.getHealth=function(){
    return this._health;
}

Monster.prototype.growl=function(){
    console.log(this._sound);
}

Monster.prototype.attack=function(victim){
    this.growl();
    var ap=0;
    if (this._attackOrder.length>0){
        var currentAttack=this._attacks[this._attackOrder[0]];
        if (typeof currentAttack != 'undefined')
            ap=currentAttack[0];
        this._attackOrder.shift();
    }
    console.log(this.name,'attacks with', ap);
    victim.defend(ap);        
}
Monster.prototype.defend=function(attackPoints){
    if (this._attackOrder.length>0){
        var currentAttack=this._attacks[this._attackOrder[0]];
            if (typeof currentAttack != 'undefined'){
                console.log(this.name,'defends with',currentAttack[1]);
                attackPoints-=currentAttack[1];
                if (attackPoints<=0){
                    console.log(this.name,'has averted the attack,',this._health,'left');
                    return;
                }
            }
        this._attackOrder.shift();
    }
        
    if (this._health-attackPoints<=0){
        console.log(this.name, 'is dead');
        process.exit(0);
    }
    
    this._health-=attackPoints;
    console.log(this.name,'has',this._health,'live points left');
    
}
  
module.exports = Monster;